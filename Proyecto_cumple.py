{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 178,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nmtFmzy_nj16",
        "outputId": "68fa93a2-c2f1-47aa-9d49-47620f356a47"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K\n",
            "up to date, audited 23 packages in 778ms\n",
            "\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K\n",
            "\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K3 packages are looking for funding\n",
            "\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K  run `npm fund` for details\n",
            "\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K\n",
            "2 \u001b[31m\u001b[1mhigh\u001b[22m\u001b[39m severity vulnerabilities\n",
            "\n",
            "To address all issues (including breaking changes), run:\n",
            "  npm audit fix --force\n",
            "\n",
            "Run `npm audit` for details.\n",
            "\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0KRequirement already satisfied: streamlit in /usr/local/lib/python3.11/dist-packages (1.45.1)\n",
            "Requirement already satisfied: streamlit-calendar in /usr/local/lib/python3.11/dist-packages (1.3.1)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.0)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.39.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Requirement already satisfied: streamlit in /usr/local/lib/python3.11/dist-packages (1.45.1)\n",
            "Requirement already satisfied: email-validator in /usr/local/lib/python3.11/dist-packages (2.2.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (2.9.0.post0)\n",
            "Requirement already satisfied: schedule in /usr/local/lib/python3.11/dist-packages (1.2.2)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.11/dist-packages (2025.2)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.0)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: dnspython>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from email-validator) (2.7.0)\n",
            "Requirement already satisfied: idna>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from email-validator) (3.10)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil) (1.17.0)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.39.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n",
            "Requirement already satisfied: streamlit in /usr/local/lib/python3.11/dist-packages (1.45.1)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (2.9.0.post0)\n",
            "Requirement already satisfied: schedule in /usr/local/lib/python3.11/dist-packages (1.2.2)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.11/dist-packages (2025.2)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.0)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil) (1.17.0)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.39.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n",
            "Requirement already satisfied: plantuml in /usr/local/lib/python3.11/dist-packages (0.3.0)\n",
            "Requirement already satisfied: httplib2 in /usr/local/lib/python3.11/dist-packages (from plantuml) (0.22.0)\n",
            "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from httplib2->plantuml) (3.2.3)\n"
          ]
        }
      ],
      "source": [
        "!pip install -q streamlit python-dateutil\n",
        "!npm install localtunnel\n",
        "!pip install --upgrade streamlit streamlit-calendar\n",
        "!pip install streamlit email-validator python-dateutil schedule pytz\n",
        "!pip install streamlit python-dateutil schedule pytz\n",
        "\n",
        "!pip install plantuml\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 179,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZNxhHSb3pvxK",
        "outputId": "470703ee-0bc8-41c1-e5e1-67d6ec4cdb54"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing __init__.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile __init__.py\n",
        "\n",
        "\"\"\"Paquete para gestión de cumpleaños.\n",
        "\n",
        "Módulos:\n",
        "    contacto: Define la estructura de datos para contactos.\n",
        "    gestor_cumpleaños: Lógica de negocio para manejar fechas y almacenamiento.\n",
        "    enviar_correos: Funcionalidad de envío de correos electrónicos.\n",
        "\"\"\"\n",
        "\n",
        "from .contacto import Contacto\n",
        "from .gestor_cumpleaños import GestorCumpleaños\n",
        "from .enviar_correos import EnviarCorreos\n",
        "\n",
        "__all__ = [\"Contacto\", \"GestorCumpleaños\", \"EnviarCorreos\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 180,
      "metadata": {
        "id": "FLuue8YWoIVp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "19534a7d-d845-4a6d-e11c-df687f24f08d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing contacto.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile contacto.py\n",
        "from datetime import date\n",
        "\n",
        "class Contacto:\n",
        "    \"\"\"Representa un contacto con información personal relevante para cumpleaños.\n",
        "\n",
        "    Atributos:\n",
        "        nombre (str): Nombre completo del contacto.\n",
        "        fecha_nacimiento (date): Fecha de nacimiento en formato YYYY-MM-DD.\n",
        "        correo (str): Dirección de correo electrónico del contacto.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, nombre: str, fecha_nacimiento: date, correo: str):\n",
        "        \"\"\"Inicializa un nuevo contacto.\n",
        "\n",
        "        Args:\n",
        "            nombre (str): Nombre del contacto. No puede estar vacío.\n",
        "            fecha_nacimiento (date): Fecha de nacimiento válida.\n",
        "            correo (str): Correo electrónico válido.\n",
        "        \"\"\"\n",
        "        self.nombre = nombre\n",
        "        self.fecha_nacimiento = fecha_nacimiento\n",
        "        self.correo = correo"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 181,
      "metadata": {
        "id": "Nl0lgyP5oIqw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3ead5da1-f325-4d27-8121-b0d5769f87a1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing gestor_cumpleaños.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile gestor_cumpleaños.py\n",
        "\n",
        "from datetime import date, datetime\n",
        "from dateutil.relativedelta import relativedelta\n",
        "from typing import List, Tuple\n",
        "from .contacto import Contacto\n",
        "from .almacenamiento import Almacenamiento\n",
        "\n",
        "class GestorCumpleaños:\n",
        "\n",
        "    \"\"\"Maneja el almacenamiento y cálculo de fechas de cumpleaños.\n",
        "\n",
        "    Responsable de:\n",
        "    - Cargar/guardar contactos desde/hacia CSV\n",
        "    - Calcular próximos cumpleaños\n",
        "    - Ordenar eventos por proximidad\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, almacenamiento: Almacenamiento):\n",
        "        self.almacenamiento = almacenamiento\n",
        "        self.contactos = self.almacenamiento.cargar_contactos()\n",
        "\n",
        "    def agregar_contacto(self, contacto: Contacto):\n",
        "        self.contactos.append(contacto)\n",
        "        self.almacenamiento.guardar_contactos(self.contactos)\n",
        "\n",
        "    def obtener_proximo_cumpleaños(self, contacto: Contacto) -> date:\n",
        "\n",
        "        \"\"\"Calcula la próxima fecha de cumpleaños para un contacto.\n",
        "        Args:\n",
        "            contacto (Contacto): Contacto para calcular su cumpleaños.\n",
        "        Returns:\n",
        "            date: Próxima fecha de cumpleaños ajustada al año actual.\n",
        "        Nota:\n",
        "            Maneja casos especiales como 29 de febrero, ajustando a 28/02 en años no bisiestos.\n",
        "        \"\"\"\n",
        "\n",
        "        hoy = date.today()\n",
        "        año_actual = hoy.year\n",
        "\n",
        "        try:\n",
        "            proximo_cumple = contacto.fecha_nacimiento.replace(year=año_actual)\n",
        "            if proximo_cumple.month == 2 and proximo_cumple.day == 29:\n",
        "                if not self._es_año_bisiesto(año_actual):\n",
        "                    proximo_cumple = date(año_actual, 3, 1)\n",
        "        except ValueError:\n",
        "            proximo_cumple = date(año_actual, 3, 1)\n",
        "\n",
        "        if proximo_cumple < hoy:\n",
        "            proximo_cumple = proximo_cumple.replace(year=año_actual + 1)\n",
        "            if proximo_cumple.month == 2 and proximo_cumple.day == 29:\n",
        "                if not self._es_año_bisiesto(año_actual + 1):\n",
        "                    proximo_cumple = date(año_actual + 1, 3, 1)\n",
        "\n",
        "        return proximo_cumple\n",
        "\n",
        "    def _es_año_bisiesto(self, año: int) -> bool:\n",
        "        return año % 4 == 0 and (año % 100 != 0 or año % 400 == 0)\n",
        "\n",
        "\n",
        "    def obtener_proximos_cumpleaños(self) -> List[Tuple[Contacto, int]]:\n",
        "\n",
        "        \"\"\"Genera lista de cumpleaños ordenados por proximidad.\n",
        "\n",
        "        Returns:\n",
        "            List[Tuple[Contacto, int]]: Lista de tuplas (Contacto, días restantes),\n",
        "            ordenada ascendentemente por días.\n",
        "        \"\"\"\n",
        "\n",
        "        hoy = date.today()\n",
        "        proximos = []\n",
        "        for contacto in self.contactos:\n",
        "            proximo_cumple = self.obtener_proximo_cumpleaños(contacto)\n",
        "            dias_restantes = (proximo_cumple - hoy).days\n",
        "            if dias_restantes < 0:  # Nunca debería ocurrir, pero por seguridad\n",
        "                proximo_cumple = proximo_cumple.replace(year=hoy.year + 1)\n",
        "                dias_restantes = (proximo_cumple - hoy).days\n",
        "            proximos.append((contacto, dias_restantes))\n",
        "        return sorted(proximos, key=lambda x: x[1])\n",
        "\n",
        "    # En gestor_cumpleaños.py\n",
        "    def es_cumpleaños_hoy(self, contacto: Contacto) -> bool:\n",
        "            proximo = self.obtener_proximo_cumpleaños(contacto)\n",
        "            return proximo == date.today()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 182,
      "metadata": {
        "id": "CuXmOnpFoJDS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2deea526-0f70-4026-f8bd-769165c6dd71"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting gestor_cumpleaños/enviar_correos.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile gestor_cumpleaños/enviar_correos.py\n",
        "\n",
        "import smtplib\n",
        "from email.mime.text import MIMEText\n",
        "\n",
        "class EnviarCorreos:\n",
        "    \"\"\"Maneja el envío de correos electrónicos mediante SMTP seguro (STARTTLS).\"\"\"\n",
        "\n",
        "    def __init__(self, servidor: str, puerto: int, remitente: str, contraseña: str):\n",
        "\n",
        "        \"\"\"Configura conexión SMTP.\n",
        "\n",
        "        Args:\n",
        "            servidor (str): Dirección del servidor SMTP (ej: smtp.gmail.com).\n",
        "            puerto (int): Puerto SMTP (ej: 587 para TLS).\n",
        "            remitente (str): Correo del remitente.\n",
        "            contraseña (str): Contraseña de aplicación o cuenta.\n",
        "        \"\"\"\n",
        "\n",
        "        self.servidor = servidor\n",
        "        self.puerto = puerto\n",
        "        self.remitente = remitente\n",
        "        self.contraseña = contraseña\n",
        "\n",
        "    def enviar_correo(self, destino: str, asunto: str, mensaje: str) -> bool:\n",
        "\n",
        "        \"\"\"Envía un correo electrónico.\n",
        "\n",
        "        Args:\n",
        "            destino (str): Correo del destinatario.\n",
        "            asunto (str): Línea de asunto.\n",
        "            mensaje (str): Cuerpo del mensaje (formato texto plano).\n",
        "\n",
        "        Returns:\n",
        "            bool: True si el envío fue exitoso, False en caso contrario.\n",
        "\n",
        "        Raises:\n",
        "            SMTPException: Si ocurre un error durante el envío.\n",
        "        \"\"\"\n",
        "        try:\n",
        "            # Crear mensaje MIME\n",
        "            msg = MIMEText(mensaje)\n",
        "            msg[\"Subject\"] = asunto\n",
        "            msg[\"From\"] = self.remitente\n",
        "            msg[\"To\"] = destino\n",
        "\n",
        "            # Conexión SMTP con STARTTLS\n",
        "            with smtplib.SMTP(self.servidor, self.puerto) as server:\n",
        "                server.starttls()\n",
        "                server.login(self.remitente, self.contraseña)\n",
        "                server.sendmail(self.remitente, destino, msg.as_string())\n",
        "                return True\n",
        "        except Exception as e:\n",
        "            print(f\"Error al enviar correo: {str(e)}\")\n",
        "            return False\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 183,
      "metadata": {
        "id": "mTpKzmYkrR6R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db4aa312-06a3-4d6e-d01d-a477c6681533"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting gestor_cumpleaños/almacenamiento.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile gestor_cumpleaños/almacenamiento.py\n",
        "\n",
        "import csv\n",
        "from datetime import datetime\n",
        "from typing import List\n",
        "from .contacto import Contacto\n",
        "from abc import ABC, abstractmethod\n",
        "\n",
        "class Almacenamiento(ABC):\n",
        "    \"\"\"Interfaz para estrategias de almacenamiento.\"\"\"\n",
        "\n",
        "    @abstractmethod\n",
        "    def cargar_contactos(self) -> List[Contacto]:\n",
        "        pass\n",
        "\n",
        "    @abstractmethod\n",
        "    def guardar_contactos(self, contactos: List[Contacto]):\n",
        "        pass\n",
        "\n",
        "class AlmacenamientoCSV(Almacenamiento):\n",
        "    \"\"\"Implementación concreta para guardar en CSV.\"\"\"\n",
        "\n",
        "    def __init__(self, archivo: str = \"contactos.csv\"):\n",
        "        self.archivo = archivo\n",
        "\n",
        "    def cargar_contactos(self) -> List[Contacto]:\n",
        "        try:\n",
        "            with open(self.archivo, 'r') as f:\n",
        "                return [\n",
        "                    Contacto(\n",
        "                        fila['nombre'],\n",
        "                        datetime.strptime(fila['fecha_nacimiento'], '%Y-%m-%d').date(),\n",
        "                        fila['correo']\n",
        "                    ) for fila in csv.DictReader(f)\n",
        "                ]\n",
        "        except FileNotFoundError:\n",
        "            return []\n",
        "\n",
        "    def guardar_contactos(self, contactos: List[Contacto]):\n",
        "        with open(self.archivo, 'w', newline='') as f:\n",
        "            escritor = csv.DictWriter(f, fieldnames=['nombre', 'fecha_nacimiento', 'correo'])\n",
        "            escritor.writeheader()\n",
        "            for contacto in contactos:\n",
        "                escritor.writerow({\n",
        "                    'nombre': contacto.nombre,\n",
        "                    'fecha_nacimiento': contacto.fecha_nacimiento.strftime('%Y-%m-%d'),\n",
        "                    'correo': contacto.correo\n",
        "                })  # ✔️ Corrección aplicada"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile main.py\n",
        "\n",
        "import streamlit as st\n",
        "import os\n",
        "import sys\n",
        "import csv\n",
        "import random\n",
        "import smtplib\n",
        "import threading\n",
        "import pytz\n",
        "\n",
        "from datetime import datetime\n",
        "from datetime import date\n",
        "sys.path.append(os.getcwd())\n",
        "from streamlit_calendar import calendar\n",
        "from gestor_cumpleaños.gestor_cumpleaños import GestorCumpleaños\n",
        "from gestor_cumpleaños.contacto import Contacto\n",
        "from gestor_cumpleaños.enviar_correos import EnviarCorreos\n",
        "from gestor_cumpleaños.almacenamiento import AlmacenamientoCSV\n",
        "from email_validator import validate_email, EmailNotValidError\n",
        "\n",
        "def main():\n",
        "    st.set_page_config(\n",
        "        page_title=\"Gestor de Cumpleaños\",\n",
        "        page_icon=\"🎂\",\n",
        "        layout=\"wide\"\n",
        "    )\n",
        "\n",
        "    # Configuración SMTP\n",
        "    smtp_server = \"smtp.gmail.com\"\n",
        "    smtp_port = 587\n",
        "    smtp_user = \"\"\n",
        "    smtp_pass = \"\"\n",
        "\n",
        "    if os.path.exists(\"smtp_config.csv\"):\n",
        "        with open(\"smtp_config.csv\", newline=\"\") as f:\n",
        "            server, port, user, pwd = next(csv.reader(f))\n",
        "            smtp_server = server\n",
        "            smtp_port = int(port)\n",
        "            smtp_user = user\n",
        "            smtp_pass = pwd\n",
        "\n",
        "    # Inicializar gestor\n",
        "    almacenamiento = AlmacenamientoCSV()\n",
        "    gestor = GestorCumpleaños(almacenamiento)\n",
        "\n",
        "    # --- Pestañas ---\n",
        "    tab1, tab2 = st.tabs([\n",
        "        \"📝 Agregar Contactos / 📅 Próximos Cumpleaños\",\n",
        "        \"📧 Gestión de Correos\"\n",
        "    ])\n",
        "\n",
        "    # --- Pestaña 1 ---\n",
        "    with tab1:\n",
        "        col1, col2 = st.columns([2, 3])\n",
        "\n",
        "        # Columna 1: Formulario y lista\n",
        "        with col1:\n",
        "            with st.form(\"nuevo_contacto\", clear_on_submit=True):\n",
        "                st.subheader(\"➕ Nuevo Contacto\")\n",
        "                nombre = st.text_input(\"Nombre*\")\n",
        "                fecha_nac = st.date_input(\"Fecha de nacimiento*\", min_value=date(1900, 1, 1))\n",
        "                correo = st.text_input(\"Correo*\")\n",
        "\n",
        "                if st.form_submit_button(\"💾 Guardar Contacto\"):\n",
        "                    if not nombre or not correo:\n",
        "                        st.error(\"⚠️ Campos obligatorios faltantes\")\n",
        "                    else:\n",
        "                        try:\n",
        "                            valid = validate_email(correo)\n",
        "                            correo = valid.email\n",
        "                            gestor.agregar_contacto(Contacto(nombre, fecha_nac, correo))\n",
        "                            gestor.almacenamiento.guardar_contactos(gestor.contactos)\n",
        "                            st.rerun()\n",
        "                        except EmailNotValidError as e:\n",
        "                            st.error(f\"⚠️ Correo inválido: {str(e)}\")\n",
        "\n",
        "            st.subheader(\"🎉 Próximos Cumpleaños\")\n",
        "            if not gestor.contactos:\n",
        "                st.warning(\"No hay contactos registrados\")\n",
        "            else:\n",
        "                for contacto, dias in gestor.obtener_proximos_cumpleaños():\n",
        "                    st.markdown(f\"\"\"\n",
        "                    **{contacto.nombre}**\n",
        "                    🗓️ {contacto.fecha_nacimiento.strftime('%d/%m')}\n",
        "                    📧 {contacto.correo}\n",
        "                    ⏳ **{dias}** días restantes\n",
        "                    \"\"\")\n",
        "\n",
        "        # Columna 2: Calendario\n",
        "        with col2:\n",
        "            st.subheader(\"📆 Calendario de Eventos\")\n",
        "            eventos = [\n",
        "                {\n",
        "                    \"title\": f\"🎂 {c.nombre}\",\n",
        "                    \"start\": date.today().replace(\n",
        "                        month=c.fecha_nacimiento.month,\n",
        "                        day=c.fecha_nacimiento.day\n",
        "                    ).isoformat(),\n",
        "                    \"color\": \"#FF6B6B\"\n",
        "                } for c in gestor.contactos\n",
        "            ]\n",
        "            calendar(\n",
        "                events=eventos,\n",
        "                options={\n",
        "                    \"initialView\": \"dayGridMonth\",\n",
        "                    \"locale\": \"es\",\n",
        "                    \"headerToolbar\": {\n",
        "                        \"left\": \"prev,next today\",\n",
        "                        \"center\": \"title\",\n",
        "                        \"right\": \"dayGridMonth,dayGridWeek\"\n",
        "                    }\n",
        "                }\n",
        "            )\n",
        "\n",
        "    # --- Pestaña 2 ---\n",
        "    with tab2:\n",
        "        config_col, msg_col = st.columns([2, 3])\n",
        "\n",
        "        with config_col:\n",
        "            with st.expander(\"⚙️ Configuración SMTP\", expanded=True):\n",
        "                with st.form(\"smtp_config\"):\n",
        "                    smtp_server_input = st.text_input(\"Servidor\", smtp_server)\n",
        "                    smtp_port_input = st.number_input(\"Puerto\", value=smtp_port)\n",
        "                    smtp_user_input = st.text_input(\"Correo\", smtp_user)\n",
        "                    smtp_pass_input = st.text_input(\"Contraseña\", type=\"password\", value=smtp_pass)\n",
        "\n",
        "                    if st.form_submit_button(\"💾 Guardar\"):\n",
        "                        with open(\"smtp_config.csv\", \"w\", newline=\"\") as f:\n",
        "                            f.write(f\"{smtp_server_input},{smtp_port_input},{smtp_user_input},{smtp_pass_input}\")\n",
        "                        st.success(\"¡Configuración guardada!\")\n",
        "                        st.rerun()\n",
        "\n",
        "            fecha_prueba = st.date_input(\n",
        "                \"🔧 Simular fecha\",\n",
        "                value=datetime.now(pytz.timezone(\"America/Mexico_City\")).date()\n",
        "            )\n",
        "\n",
        "            st.subheader(\"👥 Destinatarios\")\n",
        "            options = [f\"{c.nombre} <{c.correo}>\" for c in gestor.contactos]\n",
        "            selected = st.multiselect(\"Seleccionar:\", options=options, default=options)\n",
        "            correos_destino = [s.split(\"<\")[1].replace(\">\", \"\") for s in selected]\n",
        "\n",
        "            st.subheader(\"🔠 Tipo de Mensaje\")\n",
        "            tipo_mensaje = st.radio(\n",
        "                \"Modo:\",\n",
        "                options=[\"🎲 Aleatorio\", \"✉️ Personalizado\"],\n",
        "                horizontal=True\n",
        "            )\n",
        "\n",
        "            mensaje_a_enviar = \"\"\n",
        "            if tipo_mensaje == \"🎲 Aleatorio\":\n",
        "                try:\n",
        "                    with open(\"mensajes.csv\") as f:\n",
        "                        mensajes = [line.strip() for line in f]\n",
        "                    if mensajes:\n",
        "                        mensaje_a_enviar = random.choice(mensajes)\n",
        "                        st.success(f\"📩 Seleccionado: _{mensaje_a_enviar}_\")\n",
        "                    else:\n",
        "                        st.error(\"⚠️ ¡Agrega mensajes primero!\")\n",
        "                except FileNotFoundError:\n",
        "                    st.error(\"❌ Archivo no encontrado\")\n",
        "            else:\n",
        "                mensaje_a_enviar = st.text_area(\n",
        "                    \"Escribe tu mensaje:\",\n",
        "                    height=150,\n",
        "                    placeholder=\"¡Feliz cumple {nombre}! 🎉\"\n",
        "                )\n",
        "\n",
        "            if st.button(\"🚀 Enviar Correos\", key=\"btn_envio\"):\n",
        "                if not mensaje_a_enviar.strip():\n",
        "                    st.error(\"❌ ¡Escribe o selecciona un mensaje!\")\n",
        "                else:\n",
        "                    success = 0\n",
        "                    with st.status(\"Enviando...\", expanded=True) as status:\n",
        "                        for contacto in gestor.contactos:\n",
        "                            if contacto.correo not in correos_destino:\n",
        "                                continue\n",
        "                            prox_cumple = gestor.obtener_proximo_cumpleaños(contacto).replace(year=fecha_prueba.year)\n",
        "                            if prox_cumple == fecha_prueba:\n",
        "                                mensaje_final = mensaje_a_enviar.format(nombre=contacto.nombre)\n",
        "                                try:\n",
        "                                    if EnviarCorreos(\n",
        "                                        smtp_server, smtp_port, smtp_user, smtp_pass\n",
        "                                    ).enviar_correo(\n",
        "                                        contacto.correo,\n",
        "                                        \"🎉 ¡Feliz Cumple!\",\n",
        "                                        mensaje_final\n",
        "                                    ):\n",
        "                                        success += 1\n",
        "                                        st.write(f\"✅ {contacto.nombre}\")\n",
        "                                except Exception as e:\n",
        "                                    st.error(f\"⚠️ No se pudo enviar a {contacto.nombre}: {e}\")\n",
        "                    st.balloons()\n",
        "                    st.success(f\"**Resultado:** ✔️ {success} exitosos | ❌ {len(correos_destino)-success} fallos\")\n",
        "\n",
        "        with msg_col:\n",
        "            st.subheader(\"📚 Mensajes Guardados\")\n",
        "            nuevo_msg = st.text_input(\"Nuevo mensaje:\")\n",
        "            if st.button(\"💾 Guardar Mensaje\"):\n",
        "                if nuevo_msg.strip():\n",
        "                    with open(\"mensajes.csv\", \"a\") as f:\n",
        "                        f.write(f\"{nuevo_msg}\\n\")\n",
        "                    st.rerun()\n",
        "\n",
        "            try:\n",
        "                with open(\"mensajes.csv\") as f:\n",
        "                    mensajes = f.readlines()\n",
        "                if mensajes:\n",
        "                    for i, msg in enumerate(mensajes):\n",
        "                        cols = st.columns([6, 1])\n",
        "                        cols[0].write(f\"{i+1}. {msg.strip()}\")\n",
        "                        if cols[1].button(\"🗑️\", key=f\"del_{i}\"):\n",
        "                            del mensajes[i]\n",
        "                            with open(\"mensajes.csv\", \"w\") as f:\n",
        "                                f.writelines(mensajes)\n",
        "                            st.rerun()\n",
        "            except FileNotFoundError:\n",
        "                st.warning(\"📭 No hay mensajes\")\n",
        "\n",
        "        st.markdown(\"### Correo de prueba\")\n",
        "        dest_prueba = st.text_input(\"Email de prueba\", key=\"dest_prueba\")\n",
        "        asun_prueba = st.text_input(\"Asunto de prueba\", key=\"asun_prueba\")\n",
        "        msg_prueba = st.text_area(\"Mensaje de prueba\", key=\"msg_prueba\")\n",
        "        if st.button(\"✉️ Enviar correo de prueba\", key=\"btn_prueba\"):\n",
        "            try:\n",
        "                EnviarCorreos(\n",
        "                    smtp_server, smtp_port, smtp_user, smtp_pass\n",
        "                ).enviar_correo(dest_prueba, asun_prueba, msg_prueba)\n",
        "                st.success(\"✅ Correo de prueba enviado\")\n",
        "            except Exception as e:\n",
        "                st.error(f\"Error al enviar correo de prueba: {e}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    from backend_automation import enviar_felicitaciones_automaticas\n",
        "    threading.Thread(target=enviar_felicitaciones_automaticas, daemon=True).start()\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zo68foEKunf_",
        "outputId": "66a4ecdb-90d9-4a48-8936-f278b39ef598"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting main.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 185,
      "metadata": {
        "id": "z5SBp_IOkK3n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "785115cc-395f-459e-9812-2c30fb831f9f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting backend_automation.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile backend_automation.py\n",
        "\n",
        "\n",
        "import os\n",
        "import logging\n",
        "logging.basicConfig(filename=\"app.log\", level=logging.INFO)\n",
        "from datetime import datetime\n",
        "import time\n",
        "import schedule\n",
        "import random\n",
        "import csv\n",
        "from datetime import date\n",
        "import pytz\n",
        "\n",
        "from gestor_cumpleaños.almacenamiento import AlmacenamientoCSV\n",
        "from gestor_cumpleaños.gestor_cumpleaños import GestorCumpleaños\n",
        "from gestor_cumpleaños.enviar_correos import EnviarCorreos\n",
        "\n",
        "def obtener_fecha_actual():\n",
        "    zona_horaria = pytz.timezone(\"America/Mexico_City\")  # ¡Ajusta a tu zona!\n",
        "    return datetime.now(zona_horaria).date()\n",
        "\n",
        "def enviar_felicitaciones_automaticas():\n",
        "    try:\n",
        "        # Validar archivos esenciales\n",
        "        if not all([os.path.exists(\"smtp_config.csv\"), os.path.exists(\"mensajes.csv\")]):\n",
        "            print(\"Error: Archivos de configuración faltantes\")\n",
        "            return\n",
        "\n",
        "        # Cargar configuración SMTP\n",
        "        with open(\"smtp_config.csv\", \"r\") as f:\n",
        "            server, port, user, pwd = next(csv.reader(f))\n",
        "\n",
        "        almacenamiento = AlmacenamientoCSV()\n",
        "        gestor = GestorCumpleaños(almacenamiento)\n",
        "        enviador = EnviarCorreos(server, int(port), user, pwd)\n",
        "\n",
        "        # Cargar mensajes\n",
        "        with open(\"mensajes.csv\", \"r\") as f:\n",
        "            mensajes = [line.strip() for line in f]\n",
        "            if not mensajes:\n",
        "                print(\"Error: No hay mensajes en mensajes.csv\")\n",
        "            if not mensajes:\n",
        "               print(\"Error: El archivo mensajes.csv está vacío\")\n",
        "               return\n",
        "\n",
        "        # Verificar cumpleaños\n",
        "        hoy = obtener_fecha_actual()\n",
        "        for contacto in gestor.contactos:\n",
        "            prox_cumple = gestor.obtener_proximo_cumpleaños(contacto)\n",
        "            if prox_cumple == hoy:\n",
        "                mensaje = random.choice(mensajes).format(nombre=contacto.nombre)\n",
        "                if enviador.enviar_correo(contacto.correo, \"🎉 ¡Feliz Cumpleaños!\", mensaje):\n",
        "                    logging.info(f\"✅ Correo enviado a {contacto.nombre}\")\n",
        "                else:\n",
        "                    logging.error(f\"🚨 Error crítico: {str(e)}\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"🚨 Error crítico: {str(e)}\")\n",
        "\n",
        "# Programar tarea\n",
        "schedule.every().day.at(\"08:00\").do(enviar_felicitaciones_automaticas)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    while True:\n",
        "        schedule.run_pending()\n",
        "        time.sleep(60)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir -p gestor_cumpleaños\n",
        "!mv __init__.py contacto.py gestor_cumpleaños.py enviar_correos.py almacenamiento.py gestor_cumpleaños/\n"
      ],
      "metadata": {
        "id": "S8mVYe6XbuWO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a194664-7284-42f0-f759-968fbb514606"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mv: cannot stat 'enviar_correos.py': No such file or directory\n",
            "mv: cannot stat 'almacenamiento.py': No such file or directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls -l gestor_cumpleaños/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ll2ja-XFcJKr",
        "outputId": "9e297c3b-7393-4042-bde1-e0387f073f4c"
      },
      "execution_count": 187,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "total 24\n",
            "-rw-r--r-- 1 root root 1590 May 17 14:55 almacenamiento.py\n",
            "-rw-r--r-- 1 root root  790 May 17 14:55 contacto.py\n",
            "-rw-r--r-- 1 root root 1806 May 17 14:55 enviar_correos.py\n",
            "-rw-r--r-- 1 root root 3140 May 17 14:55 gestor_cumpleaños.py\n",
            "-rw-r--r-- 1 root root  454 May 17 14:55 __init__.py\n",
            "drwxr-xr-x 2 root root 4096 May 17 14:52 __pycache__\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls -1 *.py"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qTbsBZCNcL_A",
        "outputId": "0920cc52-5bab-4f10-fe99-7939981430ff"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "backend_automation.py\n",
            "main.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 194,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HOsaBmmUoGuH",
        "outputId": "0655168e-1f3f-42a6-e276-b69e811d78ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "35.231.243.255\n",
            "\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0Kyour url is: https://rare-feet-invite.loca.lt\n"
          ]
        }
      ],
      "source": [
        "!streamlit run main.py &> /content/logs.txt & sleep 5 && npx localtunnel --port 8501 & curl ipv4.icanhazip.com"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN+jaj9MWcYeoePJRtrNcID"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}